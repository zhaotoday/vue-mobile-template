{"version":3,"file":"index.umd.js","sources":["../../node_modules/regenerator-runtime/runtime.js","../../node_modules/regenerator-runtime/runtime-module.js","../../node_modules/babel-runtime/regenerator/index.js","../src/index.js"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n","module.exports = require(\"regenerator-runtime\");\n","export default {\n  isEmpty (value) {\n    return value === null || value === undefined || value.trim() === ''\n  },\n  keyMirror (obj) {\n    let ret = {}\n    let key\n\n    for (key in obj) {\n      if (!obj.hasOwnProperty(key)) {\n        continue\n      }\n\n      ret[key] = key\n    }\n\n    return ret\n  },\n  loadScript (url) {\n    const httpReq = new window.XMLHttpRequest()\n\n    httpReq.open('GET', url, true)\n    httpReq.send(null)\n  },\n  sleep (n) {\n    return new Promise(resolve => {\n      setTimeout(resolve, n)\n    })\n  },\n  intercept (fn, { beforeCall, req, res } = {}) {\n    return async options => {\n      const fnOptions = req ? req(options) : options\n\n      beforeCall && await beforeCall(fnOptions)\n\n      return res ? res(fn(fnOptions)) : fn(fnOptions)\n    }\n  },\n  getItem (items, key, val) {\n    return items && items.length\n      ? (items.find(item => item[key] === val) || {})\n      : {}\n  },\n  encryptPhoneNumber (phoneNumber) {\n    return phoneNumber\n      ? `${phoneNumber.substring(0, 3)}****${phoneNumber.substring(7, 11)}`\n      : ''\n  },\n  deepCopy (obj) {\n    return JSON.parse(JSON.stringify(obj))\n  },\n  formatNumber (number) {\n    return parseFloat((number || 0).toFixed(2))\n  },\n  toLowerCamelCase (str) {\n    return str.replace(/-([a-z])/g, (all, letter) => letter.toUpperCase())\n  },\n  formatHtml(html = \"\") {\n    return html.replace(/\\<img/gi, '<img style=\"max-width: 100%; height: auto\" ');\n  },\n  page(array, size) {\n    const length = array.length;\n    const newArray = [];\n    const i = Math.ceil(length / size);\n\n    let j = 0;\n\n    while (j < i) {\n      const spare = length - j * size >= size ? size : length - j * size;\n      const temp = array.slice(j * size, j * size + spare);\n\n      newArray.push(temp);\n      j++;\n    }\n\n    return newArray;\n  }\n}\n"],"names":["wrap","innerFn","outerFn","self","tryLocsList","context","state","protoGenerator","prototype","Generator","generator","Object","create","Context","_invoke","GenStateSuspendedStart","method","arg","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","iterator","undefined","return","ContinueSentinel","TypeError","record","tryCatch","type","info","done","resultName","value","next","nextLoc","sent","_sent","dispatchException","abrupt","GenStateSuspendedYield","fn","obj","call","err","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","forEach","this","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","result","hasOwn","__await","then","unwrapped","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","values","iterable","iteratorMethod","iteratorSymbol","isNaN","length","i","global","Gp","Op","$Symbol","asyncIteratorSymbol","toStringTagSymbol","runtime","Function","hasOwnProperty","Symbol","asyncIterator","toStringTag","regeneratorRuntime","module","exports","IteratorPrototype","NativeIteratorPrototype","getProto","getPrototypeOf","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","key","reverse","pop","skipTempReset","prev","charAt","slice","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","thrown","g","hadRuntime","getOwnPropertyNames","indexOf","oldRuntime","e","require$$0","trim","ret","url","httpReq","window","XMLHttpRequest","open","send","n","beforeCall","req","res","options","fnOptions","items","val","find","item","phoneNumber","substring","JSON","parse","stringify","number","parseFloat","toFixed","str","replace","all","letter","toUpperCase","array","size","newArray","Math","ceil","j","spare","temp"],"mappings":"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"}